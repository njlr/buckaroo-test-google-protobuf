import os
import hashlib

# Import the dependencies that were resolved by Buckaroo
include_defs('//BUCKAROO_DEPS')

# The target for protoc, as compiled by Buck.
# You can use the system protoc if you like, but it is better to
# use the one compiled from the Buckaroo package, since this will
# guarantee a version match with the protobuf run-time.
protoc_target = read_config('protobuf', 'protoc_target', 'google.protobuf//:protoc')

# Generates C++ code for the addressbook schema
genrule(
  name = 'addressbook-protobuf',
  out = 'out',
  srcs = [
    'addressbook.proto',
  ],
  cmd = 'mkdir $OUT && $(exe ' + protoc_target + ') --cpp_out=$OUT addressbook.proto',
)

# Convenience function for extracting a file out of a genrule result.
def extract(rule, path):
  filename, extension = os.path.splitext(path)
  name = filename + '-' + hashlib.sha256(rule + path).hexdigest()[:8] + extension
  genrule(
    name = name,
    out = name,
    cmd = 'cp $(location ' + rule + ')/' + path + ' $OUT',
  )
  return ':' + name

# Create a library from the C++ files generated by protoc
# It is comprised of:
# - addressbook.pb.h
# - addressbook.pb.cc
cxx_library(
  name = 'addressbook',
  header_namespace = '',
  exported_headers = {
    'addressbook.pb.h': extract(':addressbook-protobuf', 'addressbook.pb.h'),
  },
  srcs = [
    extract(':addressbook-protobuf', 'addressbook.pb.cc'),
  ],
  deps = BUCKAROO_DEPS, # For the protobuf run-time
)

cxx_test(
  name = 'test1',
  srcs = [
    'test1.cpp',
  ],
  deps = BUCKAROO_DEPS + [
    ':addressbook',
  ],
)
